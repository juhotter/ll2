These are the values i used in my C Programm to make the wall times. I used everytime the same values.
long n = 1000000000; 
int *x =  (int *) malloc(n * sizeof(int));
int *y = (int *) malloc(n * sizeof(int));
int *z = (int *) malloc(n * sizeof(int));
double factor = 10000000;





________________________________________________________________________________________________________________




a.)


double factor = 1;

for (int i=0; i < n; i++) {
    x[i] = factor * y[i];
    factor = factor / 2;
}



Questions:
-Where are the data dependencies?
There are a NOT loop carried dependency. 



-How can you parallelize the loops?
The appraoches i tried below. i made the factor private, so every single loop has its own copy.So theres no issue now and you can paralellize.

-Implement the original and parallelized versions and compare their wall time for reasonable sizes and numbers of threads.
Wall Time for the serial Version: 10.1487 seconds.

For this version above i get 4.49 seconds. So theres a huge improvement.

#pragma omp parallel for private(factor)
for (int i = 0; i < n; i++)
{
    x[i] = factor * y[i];
    factor = factor / 2;
}


________________________________________________________________________________________________________________
b)

for (int i = 1; i<n; i++) {
    x[i] = (x[i] + y[i-1]) / 2;
    y[i] = y[i] + z[i] * 3;
}

Questions:
-Where are the data dependencies?
The data dependencies are between the X array and the Y array. There are loop carried dependencies.

-How can you parallelize the loops?
i tried the two appraoches above with time measured.

-Implement the original and parallelized versions and compare their wall time for reasonable sizes and numbers of threads.
Wall time with the same values for both measures
Serial: 12.1110 seconds
Parallel: first i tried to make two loops out of it. And now parallelize these with pragma parallel for. So i got  a wall time for 8.59 seconds.

Like this:
#pragma omp parallel for
for (int i = 1; i<n; i++) {
    y[i] = y[i] + z[i] * 3;
}

#pragma omp parallel for
for (int i = 1; i<n; i++) {
    x[i] = (x[i] + y[i-1]) / 2;
   
}

Then i made simply a PRAGMA OMP PARALLEL FOR without splitting the loop into two

#pragma omp parallel for
for (int i = 1; i<n; i++) {
    x[i] = (x[i] + y[i-1]) / 2;
    y[i] = y[i] + z[i] * 3;
}

This resultet in a time for 6.53 seconds.


Another simple approach would be to simply switch the two statements in the loop 

for (int i = 1; i<n; i++) {
     y[i] = y[i] + z[i] * 3;
    x[i] = (x[i] + y[i-1]) / 2;
   
}

So you have a true dependency, this does not parallelize per se, but brings an simple approvement and only needs 7.03 seconds now.


Resume: So the best one is Simply Using PRAGMA OMG PARALLEL FOR and leave the loop alltogether. But because there are a dependecy this can result in a error. So the safe
and best way to go is simply break the loops and parallelize it seperately.
________________________________________________________________________________________________________________

c)



x[0] = x[0] + 5 * y[0];
for (int i = 1; i<n; i++) {
    x[i] = x[i] + 5 * y[i];
    if ( twice ) {
        x[i-1] = 2 * x[i-1]
    }
}



Questions:
-Where are the data dependencies?
There are two dependencies. One loop carried and one casual dependecy. The loop carried is on the x[].
So so you cannot simply parallelize this like in the first one.


-How can you parallelize the loops?
Look above the implementation.


-Implement the original and parallelized versions and compare their wall time for reasonable sizes and numbers of threads.

Assumption: 
int twice = 1; so that it jumps into the if condition.
Wall time for Serial: 8.9162 seconds


Assumption: 
int twice = 0; so that it jumps NOT into the if condition.
Wall time for Serial: 7.9752 seconds


So now change the code like the following to allow parallelization without dependencies.

int i = 1;
if (twice)
{
    #pragma omp parallel for
    for (i = 1; i < n; i++)
    {
        x[i] = x[i] + 5 * y[i];
        
    }

    #pragma omp parallel for
for (i = 1; i < n; i++)
    {
        x[i - 1] = 2 * x[i - 1];
    }

}
     else
     {
         x[i] = x[i] + 5 * y[i];

     }
     
     now for twice = 0 i got the times: 0.0004 seconds
     now for twice = 1 i got the times: 8.1292 seconds
     

